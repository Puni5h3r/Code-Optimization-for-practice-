from collections import defaultdict


# This class represents a directed graph
# using adjacency list representation
class Graph:

    # Constructor
    def __init__(self):

        # default dictionary to store graph
        self.graph = defaultdict(list)

        # function to add an edge to graph

    def addEdge(self, u, v):
        self.graph[u].append(v)
        self.graph[v].append(u)

        # Function to print a BFS of graph

    def BFS(self, s, n):

        # Mark all the vertices as not visited
        visited = [False] * (n)
        d = [-1] * n

        # Create a queue for BFS
        queue = []

        # Mark the source node as
        # visited and enqueue it
        queue.append(s)
        visited[s] = True
        d [s] = 0 

        while queue:

            # Dequeue a vertex from
            # queue and print it
            s = queue.pop(0)
            # print (s, end = " ")

            # Get all adjacent vertices of the
            # dequeued vertex s. If a adjacent
            # has not been visited, then mark it
            # visited and enqueue it
            for i in self.graph[s]:
                if visited[i] == False:
                    queue.append(i)
                    visited[i] = True

                    d[i] = d[s] + 6

        return d


t = int(input())
for i in range(t):

    n, m = [int(value) for value in input().split()]
    g = Graph()
    for i in range(m):
        x, y = [int(x) for x in input().split()]
        g.addEdge(x - 1, y - 1)
    s = int(input())
    d = g.BFS(s - 1, n)
    for i in d:
        if i != 0:
            print(i, end=" ")
    print()

